import unittestimport pandas as pdimport DSBMFunctionclass MyTestCase(unittest.TestCase):    def setUp(self):        self.df = pd.read_csv("DDEA_example_data.csv", index_col=0)    def test_input_oriented(self):        W_i = [1]  # Weights for inputs        W_t = [1, 1, 1, 1]  # Weights for outputs        T_X, T_Y, T_Z = DSBMFunction.df_to_dea(self.df)        Test_Result = DSBMFunction.Dynamic_SBM(T_X, T_Y, Term=4, orientation="input", VRS='no', Z_Free=T_Z, W_t=W_t,                                               W_i=W_i)        self.assertEqual(len(Test_Result), 8)    def test_output_oriented(self):        W_i = [1]  # Weights for inputs        W_t = [1, 1, 1, 1]  # Weights for outputs        T_X, T_Y, T_Z = DSBMFunction.df_to_dea(self.df)        Test_Result = DSBMFunction.Dynamic_SBM(T_X, T_Y, Term=4, orientation="output", VRS='no', Z_Free=T_Z, W_t=W_t,                                               W_i=W_i)        self.assertEqual(len(Test_Result), 8)    def test_non_oriented(self):        W_i = [1]  # Weights for inputs        W_t = [1, 1, 1, 1]  # Weights for outputs        T_X, T_Y, T_Z = DSBMFunction.df_to_dea(self.df)        Test_Result = DSBMFunction.Dynamic_SBM(T_X, T_Y, Term=4, orientation="non", VRS='no', Z_Free=T_Z,                                               W_t=W_t, W_i=W_i)        self.assertEqual(len(Test_Result), 8)    def test_weight_t(self):        W_i = [1]  # Weights for inputs        W_t = [0.4, 0.2, 0.2, 0.2]  # Weights for outputs        T_X, T_Y, T_Z = DSBMFunction.df_to_dea(self.df)        Test_Result = DSBMFunction.Dynamic_SBM(T_X, T_Y, Term=4, orientation="input", VRS='no', Z_Free=T_Z, W_t=W_t,                                               W_i=W_i)        self.assertEqual(len(Test_Result), 8)    def test_BadLink(self):        W_i = [1]  # Weights for inputs        W_t = [1, 1, 1, 1]   # Weights for outputs        T_X, T_Y, T_Z = DSBMFunction.df_to_dea(self.df)        Test_Result = DSBMFunction.Dynamic_SBM(T_X, T_Y, Term=4, orientation="input", VRS='no', Z_Bad=T_Z, W_t=W_t,                                               W_i=W_i)        self.assertEqual(len(Test_Result), 8)if __name__ == '__main__':    unittest.main()