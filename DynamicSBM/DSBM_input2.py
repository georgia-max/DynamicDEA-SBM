"""Tone & Tsutsui 2010 Dynanmic SBM DEA"""from gurobipy import*import numpy as npimport pandas as pdDMU = ['A','B','C','D','E','F','G','H']E={}E_term1,E_term2,E_term3,E_term4, E_total = {},{},{},{},{}E_all={}constr_X={}SL_sol_list={}L={}Lnk={}T={}SO={}SI={}SL={}W={}SL_ALL = ()for o in DMU:    #TODO change the data to Tone, Tsutsui (2010) Dynamic SBM DEA paper"    Terms=4 #terms    #Term input    T1I=1    T2I = 1    T3I = 1    T4I = 1    #term output    T1O = 1    T2O = 1    T3O = 1    T4O = 1    #carry over link    L12= 1    L23= 1    L34= 1    L45=1    "This data is from Tone, Tsutsui (2010) Dynamic SBM DEA paper"    DMU, T1x,T1y= multidict({('A'):[10,50],("B"):[30,150], ("C"):[20,50],("D"):[30,100],("E"):[30,150],("F"):[10,100],                          ("G"):[30,100],("H"):[20,100]})    DMU, T2x, T2y = multidict({('A'):[11,50],("B"):[33,150], ("C"):[22,100],("D"):[33,120],                                 ("E"):[33,135],("F"):[11,90], ("G"):[33,180],("H"):[22,40]})    DMU, T3x, T3y = multidict({('A'):[12,50],("B"):[36,150], ("C"):[24,150],("D"):[36,150],                                 ("E"):[36,120],("F"):[12,40], ("G"):[36,95],("H"):[24,150]})    DMU, T4x, T4y = multidict({('A'): [13,50], ("B"): [39,150], ("C"): [26,180], ("D"): [39,180],                                    ("E"): [39,105], ("F"): [13,35], ("G"): [39,200], ("H"): [26,100]})    DMU, Z12, Z23, Z34, Z45 =  multidict({('A'):[10,10,10,10],("B"):[20,25,30,35], ("C"):[30,30,30,30],("D"):[15,20,25,30],                                 ("E"):[20,25,30,35],("F"):[10,10,10,10], ("G"):[20,30,40,50],("H"):[10,10,10,10]})    lamd ={}    print("DMU,",DMU)    # types2 = set(type(k) for k in T1x.values())    # print("types2",types2)    # #transform multidic into datafram and csv    # SDEA_data_exp = pd.DataFrame.from_dict([T1x,T2x,T3x,T4x,T1y,T2y,T3y,T4y,Z12,Z23,Z34,Z45])    # SDEA_data_exp= SDEA_data_exp.T    # print(SDEA_data_exp)    # SDEA_data_exp.to_csv('DDEA_example_data.csv')    model = Model("DySBMDEA- input oriented")    #Add decision variables    # lamda_j_t    for t in range(Terms):        for j in DMU:            lamd[t, j] = model.addVar(vtype=GRB.CONTINUOUS, name="Î»_%s_%s:" % (t, j))    #output slack    for t in range(Terms):        if t==0:            for r in range(T1O):                SO[t, r] = model.addVar(vtype=GRB.CONTINUOUS, name="SO%s_%s:" % (t, r))        elif t ==1:            for r in range(T2O):                SO[t, r] = model.addVar(vtype=GRB.CONTINUOUS, name="SO%s_%s:" % (t, r))        elif t ==2:            for r in range(T3O):                SO[t, r] = model.addVar(vtype=GRB.CONTINUOUS, name="SO%s_%s:" % (t, r))        elif t ==3:            for r in range(T4O):                SO[t, r] = model.addVar(vtype=GRB.CONTINUOUS, name="SO%s_%s:" % (t, r))        else:            pass    print(SO)    #input slack    for t in range(Terms):        if t == 0:            for i in range(T1I):                SI[t, i] = model.addVar(vtype=GRB.CONTINUOUS, name="SI%s_%s:" % (t, i))        elif t == 1:            for i in range(T2I):                SI[t, i] = model.addVar(vtype=GRB.CONTINUOUS, name="SI%s_%s:" % (t, i))        elif t == 2:            for i in range(T3I):                SI[t, i] = model.addVar(vtype=GRB.CONTINUOUS, name="SI%s_%s:" % (t, i))        elif t == 3:            for i in range(T4I):                SI[t, i] = model.addVar(vtype=GRB.CONTINUOUS, name="SI%s_%s:" % (t, i))        else:            pass    print(SI)    # free link slack    for t in range(Terms):        if t == 0:            for i in range(L12):                SL[t, i] = model.addVar(vtype=GRB.CONTINUOUS, name="SL%s_%s:" % (t, i))        elif t == 1:            for i in range(L23):                SL[t, i] = model.addVar(vtype=GRB.CONTINUOUS, name="SL%s_%s:" % (t, i))        elif t == 2:            for i in range(L34):                SL[t, i] = model.addVar(vtype=GRB.CONTINUOUS, name="SL%s_%s:" % (t, i))        elif t == 3:            for i in range(L45):                SL[t, i] = model.addVar(vtype=GRB.CONTINUOUS, name="SL%s_%s:" % (t, i))        else:            pass    print(SL)    model.update()    model.setObjective(        1/4*((1-SI[0,0]/T1x[o])+(1-SI[1,0]/T2x[o])+(1-SI[2,0]/T3x[o])+(1-SI[3,0]/T4x[o]))             , GRB.MINIMIZE)    #input contriant Eq#(2)    In1 = model.addConstr(quicksum(lamd[0,j] * T1x[j] for j in DMU) + SI[0,0] ==  T1x[o], name = 'In1') #term1 input#1    In2 = model.addConstr(quicksum(lamd[1,j] * T2x[j] for j in DMU) + SI[1,0] == T2x[o],name = 'In2')#term2 input#1    In3 = model.addConstr(quicksum(lamd[2,j] * T3x[j] for j in DMU) + SI[2,0] == T3x[o],name = 'In3')    In4 = model.addConstr(quicksum(lamd[3, j] * T4x[j] for j in DMU) + SI[3, 0] == T4x[o],name = 'In4')    # output contriant Eq#(2)    Out1 = model.addConstr(quicksum(lamd[0,j] * T1y[j] for j in DMU) - SO[0,0] == T1y[o], name = 'Out1')    Out2 = model.addConstr(quicksum(lamd[1,j] * T2y[j] for j in DMU) - SO[1,0] == T2y[o], name = 'Out2')    Out3= model.addConstr(quicksum(lamd[2,j] * T3y[j] for j in DMU) - SO[2,0] == T3y[o], name = 'Out3')    Out4= model.addConstr(quicksum(lamd[3, j] * T4y[j] for j in DMU) - SO[3, 0] == T4y[o], name = 'Out4')    #free link constraint Eq#(2)    Link1 = model.addConstr(quicksum(Z12[j] *lamd[0,j] for j in DMU) +SL[0, 0]== Z12[o], name = 'Link1')    Link2= model.addConstr(quicksum(Z23[j] * lamd[1,j] for j in DMU) +SL[1, 0]== Z23[o], name = 'Link2')    Link3 = model.addConstr(quicksum(Z34[j] * lamd[2, j] for j in DMU)+SL[2, 0] == Z34[o], name = 'Link3')    Link4 = model.addConstr(quicksum(Z45[j] * lamd[3, j] for j in DMU) +SL[3, 0]== Z45[o], name = 'Link4')    # #fixed link case    # model.addConstr(Z12[o] == quicksum(Z12[j] * lamd[1,j] for j in DMU))    # model.addConstr(Z12[o] == quicksum(Z12[j] * lamd[0, j] for j in DMU))    # model.addConstr(Z23[o] == quicksum(Z23[j] * lamd[1, j] for j in DMU))    # model.addConstr(Z23[o] == quicksum(Z23[j] * lamd[2,j] for j in DMU))    # model.addConstr(quicksum(lamd[0,j] for j in DMU) == 1)    # model.addConstr(quicksum(lamd[1,j] for j in DMU) == 1)    # model.addConstr(quicksum(lamd[2, j] for j in DMU) == 1)    model.update()    model.optimize()    if model.solCount > 0:        print("objective value (Theta) = %0.3f "% model.objVal)    else:        print("solution status = ", model.Status)    E[o] = "The efficiency of DMU %s:%4.3g" % (o, model.objVal) #free link case    # for i in model.getVars():    #     #l[r][i]= "The lamda and effiency of DMU %s: %0.3f"(i.varName, i.x)    #     print("%s %0.3f"%(i.varName, i.x))#x get the lamda values and efficeincy score    for t in range(Terms):        for j in DMU:            L[o]= " %s %0.3f"%(lamd[t, j].varName, lamd[t, j].x)            #print(L[o]) #lamda    SO_sol= model.getAttr('x',SO )    print("SO_sol",SO_sol)    SI_sol = model.getAttr('x',SI)    print("SI_sol",SI_sol)    SL_sol = model.getAttr('x',SL) #dictionary    print("SL_sol",SL_sol)    #constr_names = model.getAttr('ConstrName', model.getConstrs())    #constr_values = np.round(model.getAttr("Pi", model.getConstrs()),3) #dual prices for the contraints.    #print("get attribute",zip(constr_names, constr_values))    #print(constr_names)    #print(constr_values)    constr_X[o] = np.round(model.getAttr("X", model.getVars()), 3) # dual prices for the contraints.    #print(constr_X)    SL_sol_list[o] = constr_X[o][-4:]    #print("sl_sol_list", SL_sol_list[o])    # E_term1[o] = "%0.3f" % (1 - (SI_sol[0, 0] / T1x[o]))    # E_term2[o] = "%0.3f" % (1 - (SI_sol[1, 0] / T2x[o]))    # E_term3[o] = "%0.3f" % (1 - (SI_sol[2, 0] / T3x[o]))    # E_term4[o] = "%0.3f" % (1 - (SI_sol[3, 0] / T4x[o]))    # print("Term 1 score:", E_term1[o])    # print("Term 2 score:",E_term2[o])    # print("Term 3 score:",E_term3[o])    # print("Term 4 score:", E_term4[o])    print("------------------------")    # SL_ALL  = dict(SL_sol)    # SL_ALL.update(SL_sol)    #print(SL_ALL)for o in DMU:    print(E[o])    #print(SL_sol_list[o])#for o in DMU:    #SL_all = []    #SL_all = SL_all.append(SL)    #SL = SL.update(SL)    #print("SL",SL[o])    #print("SL_ALL",SL_all)SL_sol_list_all = []for o in DMU:    SL_sol_list_all.append(SL_sol_list[o])print(SL_sol_list_all)print(type(SL_sol_list_all))#turn list into dictionaryDMU = ["A","B","C","D","E","F","G","H"]Link_Slack = dict(zip(DMU,SL_sol_list_all))print("linkSlack", Link_Slack)#### second stage of DSBM-DEA for adjust-score (Ex-post way)######"""for o in DMU:    #TODO change the data to Tone, Tsutsui (2010) Dynamic SBM DEA paper"    Terms=4 #terms    #Term input    T1I=1    T2I = 1    T3I = 1    T4I = 1    #term output    T1O = 1    T2O = 1    T3O = 1    T4O = 1    #carry over link    L12= 1    L23= 1    L34= 1    L45=1    "This data is from Tone, Tsutsui (2010) Dynamic SBM DEA paper"    DMU, T1x,T1y= multidict({('A'):[10,50],("B"):[30,150], ("C"):[20,50],("D"):[30,100],("E"):[30,150],("F"):[10,100],                          ("G"):[30,100],("H"):[20,100]})    DMU, T2x, T2y = multidict({('A'):[11,50],("B"):[33,150], ("C"):[22,100],("D"):[33,120],                                 ("E"):[33,135],("F"):[11,90], ("G"):[33,180],("H"):[22,40]})    DMU, T3x, T3y = multidict({('A'):[12,50],("B"):[36,150], ("C"):[24,150],("D"):[36,150],                                 ("E"):[36,120],("F"):[12,40], ("G"):[36,95],("H"):[24,150]})    DMU, T4x, T4y = multidict({('A'): [13,50], ("B"): [39,150], ("C"): [26,180], ("D"): [39,180],                                    ("E"): [39,105], ("F"): [13,35], ("G"): [39,200], ("H"): [26,100]})    DMU, Z12, Z23, Z34, Z45 =  multidict({('A'):[10,10,10,10],("B"):[20,25,30,35], ("C"):[30,30,30,30],("D"):[15,20,25,30],                                 ("E"):[20,25,30,35],("F"):[10,10,10,10], ("G"):[20,30,40,50],("H"):[10,10,10,10]})    lamd ={}    model2= Model("DySBMDEA- input oriented2")    #Add decision variables    # lamda_j_t    for t in range(Terms):        for j in DMU:            lamd[t, j] = model2.addVar(vtype=GRB.CONTINUOUS, name="Î»_%s_%s:" % (t, j))    #output slack    for t in range(Terms):        if t==0:            for r in range(T1O):                SO[t, r] = model2.addVar(vtype=GRB.CONTINUOUS, name="SO%s_%s:" % (t, r))        elif t ==1:            for r in range(T2O):                SO[t, r] = model2.addVar(vtype=GRB.CONTINUOUS, name="SO%s_%s:" % (t, r))        elif t ==2:            for r in range(T3O):                SO[t, r] = model2.addVar(vtype=GRB.CONTINUOUS, name="SO%s_%s:" % (t, r))        elif t ==3:            for r in range(T4O):                SO[t, r] = model2.addVar(vtype=GRB.CONTINUOUS, name="SO%s_%s:" % (t, r))        else:            pass    print(SO)    #input slack    for t in range(Terms):        if t == 0:            for i in range(T1I):                SI[t, i] = model2.addVar(vtype=GRB.CONTINUOUS, name="SI%s_%s:" % (t, i))        elif t == 1:            for i in range(T2I):                SI[t, i] = model2.addVar(vtype=GRB.CONTINUOUS, name="SI%s_%s:" % (t, i))        elif t == 2:            for i in range(T3I):                SI[t, i] = model2.addVar(vtype=GRB.CONTINUOUS, name="SI%s_%s:" % (t, i))        elif t == 3:            for i in range(T4I):                SI[t, i] = model2.addVar(vtype=GRB.CONTINUOUS, name="SI%s_%s:" % (t, i))        else:            pass    print(SI)    # free link slack    for t in range(Terms):        if t == 0:            for i in range(L12):                SL[t, i] = model2.addVar(vtype=GRB.CONTINUOUS, name="SL%s_%s:" % (t, i))        elif t == 1:            for i in range(L23):                SL[t, i] = model2.addVar(vtype=GRB.CONTINUOUS, name="SL%s_%s:" % (t, i))        elif t == 2:            for i in range(L34):                SL[t, i] = model2.addVar(vtype=GRB.CONTINUOUS, name="SL%s_%s:" % (t, i))        elif t == 3:            for i in range(L45):                SL[t, i] = model2.addVar(vtype=GRB.CONTINUOUS, name="SL%s_%s:" % (t, i))        else:            pass    print(SL)    model2.update()    model2.setObjective(        1/4*((1-SI[0,0]/T1x[o])+(1-SI[1,0]/T2x[o])+(1-SI[2,0]/T3x[o])+(1-SI[3,0]/T4x[o]))             , GRB.MINIMIZE)    #input contriant Eq#(2)    model2.addConstr(quicksum(lamd[0,j] * T1x[j] for j in DMU) + SI[0,0] ==  T1x[o])    model2.addConstr(quicksum(lamd[1,j] * T2x[j] for j in DMU) + SI[1,0] == T2x[o])    model2.addConstr(quicksum(lamd[2,j] * T3x[j] for j in DMU) + SI[2,0] == T3x[o])    model2.addConstr(quicksum(lamd[3, j] * T4x[j] for j in DMU) + SI[3, 0] == T4x[o])    # output contriant Eq#(2)    model2.addConstr(quicksum(lamd[0,j] * T1y[j] for j in DMU) - SO[0,0] == T1y[o])    model2.addConstr(quicksum(lamd[1,j] * T2y[j] for j in DMU) - SO[1,0] == T2y[o])    model2.addConstr(quicksum(lamd[2,j] * T3y[j] for j in DMU) - SO[2,0] == T3y[o])    model2.addConstr(quicksum(lamd[3, j] * T4y[j] for j in DMU) - SO[3, 0] == T4y[o])    #free link constraint Eq#(2)    model2.addConstr(quicksum(Z12[j] *lamd[0,j] for j in DMU) +SL[0, 0]== Z12[o])    model2.addConstr(quicksum(Z23[j] * lamd[1,j] for j in DMU) +SL[1, 0]== Z23[o])    model2.addConstr(quicksum(Z34[j] * lamd[2, j] for j in DMU)+SL[2, 0] == Z34[o])    model2.addConstr(quicksum(Z45[j] * lamd[3, j] for j in DMU) +SL[3, 0]== Z45[o])    model2.update()    model2.optimize()    if model2.solCount > 0:        print("objective value (Theta) = %0.3f "% model2.objVal)    else:        print("solution status = ", model2.Status)    E[o] = "The efficiency of DMU %s:%4.3g" % (o, model2.objVal) #free link case    for t in range(Terms):        for j in DMU:            L[o]= " %s %0.3f"%(lamd[t, j].varName, lamd[t, j].x)            print(L[o]) #lamda    SO_sol= model2.getAttr('x',SO )    print("SO_sol",SO_sol)    SI_sol = model2.getAttr('x',SI)    print("SI_sol",SI_sol)    E_term1[o] = "%0.3f" % (1 - (SI_sol[0, 0] / T1x[o]))    E_term2[o] = "%0.3f" % (1 - (SI_sol[1, 0] / T2x[o]))    E_term3[o] = "%0.3f" % (1 - (SI_sol[2, 0] / T3x[o]))    E_term4[o] = "%0.3f" % (1 - (SI_sol[3, 0] / T4x[o]))    print("Term 1 score:", E_term1[o])    print("Term 2 score:",E_term2[o])    print("Term 3 score:",E_term3[o])    print("Term 4 score:", E_term4[o])    print("------------------------")"""